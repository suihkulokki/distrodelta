#!/usr/bin/python
import subprocess
import apt_pkg
import argparse
import os.path

apt_pkg.init_config()
apt_pkg.init_system()
cache = apt_pkg.Cache(None)
result = {}
installed = "install ok installed"
distromap = { 'stretch' : 'testing', 'jessie' : 'stable', 'sid' : 'unstable'}
basedistro = subprocess.check_output(['lsb_release', '-c', '-s']).rstrip()
if basedistro in distromap.keys():
    basedistro=distromap[basedistro]

class PackageInfo:
    def __init__(self, name, tagfile):
        self.pkg = cache[name]
        self.version = tagfile.section.get("Version")
        self.source = tagfile.section.get("Source")
        if self.source != None:
            self.source = self.source.split()[0]

        self.binary = name
        if not self.pkg.has_versions:
            self.filelist = None
            self.archive = None
            self.origin = None
            self.site = None
            return
        self.filelist = self.pkg.version_list[0].file_list
        self.archive = self.filelist[0][0].archive
        self.origin = self.filelist[0][0].origin
        self.site = self.filelist[0][0].site

    def printChangelog(self):
        oldver="0"
        changesfile = "/usr/share/doc/"+self.binary+"/changelog.Debian.gz"
        if not os.path.exists(changesfile):
            changesfile = "/usr/share/doc/"+self.binary+"/changelog.gz"
            if not os.path.exists(changesfile):
                print "%s: changelog missing" % (self.binary)
                return
        localver = subprocess.check_output(['dpkg-parsechangelog',
            '--file', changesfile, "-SVersion"]).rstrip()

        for ver in self.pkg.version_list:
            if apt_pkg.version_compare(ver.ver_str, localver) >= 0:
                continue
            if apt_pkg.version_compare(ver.ver_str, oldver) > 0:
                oldver=ver.ver_str
        if oldver == "0" or oldver == localver:
            changes = subprocess.check_output(['dpkg-parsechangelog',
                '--file', changesfile])
        else:
            changes = subprocess.check_output(['dpkg-parsechangelog',
                '--file', changesfile  , '--since', oldver])

        print changes

    def getName(self, binary):
        if self.source == None or binary:
            return self.binary
        else:
            return self.source

    def getReason(self, arguments):
        if arguments.origin != None:
            retval = self.origin
        elif arguments.distro != None:
            retval = self.archive
        elif arguments.site != None:
            retval = self.site
        if not retval:
            retval="local"
        return retval

def main():
    parser = argparse.ArgumentParser(
            description='Print packages not part of base distro')
    parser.add_argument('-o', '--origin', nargs='+',
            help='Filter by origin')
    parser.add_argument('-d', '--distro', nargs='+',
            help='Filter by distro codename')
    parser.add_argument('-s', '--site', nargs='+',
            help='Filter by download site')
    parser.add_argument('-b', '--binaries', action='store_true',
            help='Print out binary package names')
    parser.add_argument('-c', '--changelogs', action='store_true',
            help='Print out changelog entries since')
    arguments = parser.parse_args()

    if (arguments.origin is None and
        arguments.distro  is None and
        arguments.site is None):
        arguments.origin = ['Debian']
    bins=arguments.binaries

    tagfile = apt_pkg.TagFile('/var/lib/dpkg/status')
    while tagfile.step() == 1:
        status = tagfile.section.get("Status")
        name   = tagfile.section.get("Package")
        if status == installed and name in cache:
            p = PackageInfo(name, tagfile)
            if arguments.origin != None:
                if p.origin not in arguments.origin:
                    result[p.getName(bins)] = p
            elif arguments.distro != None:
                if p.archive not in arguments.distro:
                    result[p.getName(bins)] = p
            elif arguments.site != None:
                if p.site not in arguments.site:
                    result[p.getName(bins)] = p

    for name in sorted(result.keys()):
        p = result[name]
        if arguments.changelogs:
            print "=========================================================="
            p.printChangelog()
        else:
            print "%s: from %s, %s" % (name, p.getReason(arguments), p.version)

if __name__ == "__main__":
        main()
